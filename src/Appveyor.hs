module Appveyor where

import           Build
import           Config
import           Utils
import           Stack
import qualified Yaml as Y

import           TextGen.Out
import           Control.Monad

import           Data.Char (toLower)

withKey s f = do
    out s >> out ":" >> nl
    withIndent f

listItem = out "- "
keyValue k v = out k >> out ": " >> outNl v
string v = out "\"" >> out v >> out "\""

quotedString s = "\"" ++ s ++ "\""
content ctnt = out (Y.toString ctnt)

conf (buildName, buildCmd, buildStackYaml, url) =
    listItem >> content (Y.dict [ (Y.key "BUILD", Y.qstring buildName)
                                , (Y.key "STACKCMD", Y.qstring (unwords buildCmd))
                                , (Y.key "STACKCFG", Y.qstring buildStackYaml)
                                , (Y.key "STACKURL", Y.qstring url) ]) >> nl

environment []     []     = pure ()
environment global matrix = withKey "environment" $ do
    unless (null global) $ withKey "global" $ forM_ global $ \(k, v) -> keyValue k v
    unless (null matrix) $ withKey "matrix" $ forM_ matrix $ conf

toAppveyor :: Digest SHA256 -> C -> String
toAppveyor hash c = runOut $ do
    outNl (yamlAutoGeneratedComment hash) >> nl
    keyValue "version" "\"{build}\""
    keyValue "clone_folder" "C:\\project"
    keyValue "build" "off"
    withKey "cache" $ do
        listItem >> string (stackRoot ++ " -> .appveyor.yml") >> nl
    nl
    environment [ ("STACK_ROOT", quotedString stackRoot) ] matrix
    nl
    withKey "matrix" $ do
        keyValue "fast_finish" (map toLower $ show fastFail)
        unless (null allowedFailures) $ withKey "allowed_failures" $ forM_ allowedFailures $ conf
    nl
    withKey "install" $ do
        listItem >> outNl "set PATH=C:\\Program Files\\Git\\mingw64\\bin;%PATH%"
        listItem >> outNl "curl -ostack.zip -L %STACKURL%"
        -- listItem >> outNl "curl -ostack.zip -L --insecure https://www.stackage.org/stack/windows-i386"
        listItem >> outNl "7z x stack.zip stack.exe"
        listItem >> outNl "refreshenv"

    withKey "test_script" $ do
        listItem >> outNl "echo %STACKCFG% > stack.yaml"
        listItem >> outNl "stack setup > nul"
        listItem >> outNl "echo \"\" | %STACKCMD%"
  where

    fastFail = True
    stackRoot = "C:\\\\SR"
    matrix :: [(String, [String], String, String)]
    matrix = map (\b -> (buildName b, stackBuildCommand b, escapeQuote (stackYaml b), stackUrl (win64or32 b))) bs
    allowedFailures = []
    bs = filter onWindows $ map (makeBuildFromEnv c . resolveBuild c) $ builds c
    onWindows b = Win64 `elem` buildPlatforms b
               || Win32 `elem` buildPlatforms b
    win64or32 b
        | Win64 `elem` buildPlatforms b = Win64
        | Win32 `elem` buildPlatforms b = Win32
        | otherwise                     = Win64
